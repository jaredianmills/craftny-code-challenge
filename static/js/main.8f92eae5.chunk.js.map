{"version":3,"sources":["Post.js","Posts.js","Favorites.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Post","getAgeOfPost","createdUTC","ageOfPostInSeconds","Date","getTime","ageOfPostInMinutes","Math","round","ageOfPostInHours","concat","toLocaleString","split","handleIconClick","event","classList","Array","from","target","includes","add","_this","props","addToFavorites","post","removeFromFavorites","this","icon","react_default","a","createElement","Fragment","Card","centered","className","style","width","Image","src","url","maxHeight","objectFit","backgroundColor","Icon","name","onClick","Header","title","Content","extra","author","created_utc","ups","Component","Posts","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","response","json","JSONresponse","setState","posts","data","children","state","_this2","map","src_Post","key","id","Favorites","mapFavorites","favorites","noFavoritesAdded","Message","textAlign","marginLeft","console","log","length","Navbar","panes","menuItem","Menu","Item","render","Tab","Pane","attached","src_Posts","src_Favorites","menu","borderless","tabular","App","toConsumableArray","index","indexOf","updatedFavorites","slice","src_Navbar","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f92eae5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Image, Icon } from 'semantic-ui-react'\n\nclass Post extends Component {\n\n  getAgeOfPost = (createdUTC) => {\n    const currentTime = new Date()\n    const ageOfPostInSeconds = (currentTime.getTime() / 1000) - createdUTC\n    const ageOfPostInMinutes = Math.round(ageOfPostInSeconds / 60)\n    const ageOfPostInHours = Math.round(ageOfPostInMinutes / 60)\n\n    if (ageOfPostInMinutes < 60) {\n      return `${ageOfPostInMinutes} minutes ago`\n    } else if (ageOfPostInHours < 24) {\n      return `${ageOfPostInHours} hours ago`\n    } else if (ageOfPostInHours < 48) {\n      return `a day ago`\n    } else {\n      const postDate = new Date(createdUTC)\n      return postDate.toLocaleString().split(',')[0]\n    }\n  }\n\n  handleIconClick = (event) => {\n    const classList = Array.from(event.target.classList)\n    if (classList.includes('heart') && !classList.includes('icon-clicked')) {\n      event.target.classList.add('icon-clicked')\n      this.props.addToFavorites(this.props.post)\n    } else if (classList.includes('trash')) {\n      this.props.removeFromFavorites(this.props.post)\n    }\n  }\n\n  render() {\n    const post = this.props.post\n    const icon = this.props.icon\n\n    return (\n      <React.Fragment>\n        <Card centered className=\"post-card\" style={{width: '500px'}}>\n          <Image src={post.url} style={{maxHeight: '350px', objectFit: 'scale-down', backgroundColor: 'black'}} />\n          <Icon name={icon} className=\"icon-unclicked\" onClick={this.handleIconClick}/>\n          <Card.Header className=\"post-header\">\n            {post.title}\n          </Card.Header>\n          <Card.Content extra className=\"post-extra\">\n            <Icon name=\"user\" />\n            {`u/${post.author} `}\n            <span>&bull;</span>\n            <Icon name=\"clock outline\" />\n            {`${this.getAgeOfPost(post.created_utc)} `}\n            <span>&bull;</span>\n            <Icon name=\"lightning\" />\n            {post.ups}\n          </Card.Content>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Post\n","import React, { Component } from 'react'\nimport Post from './Post'\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      posts: []\n    }\n  }\n\n  componentDidMount = () => {\n    fetch('https://www.reddit.com/r/analog/top/.json')\n      .then(response => response.json())\n      .then(JSONresponse => this.setState({posts: JSONresponse.data.children}))\n  }\n\n  render() {\n    const { posts } = this.state\n    return(\n      <React.Fragment>\n        {posts.map(post => <Post key={post.data.id} post={post.data} icon={\"heart\"} addToFavorites={this.props.addToFavorites}/>)}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Posts\n","import React, { Component } from 'react'\nimport Post from './Post'\nimport { Message } from 'semantic-ui-react'\n\nclass Favorites extends Component {\n\n  mapFavorites = () => {\n    return (\n      <React.Fragment>\n        {this.props.favorites.map(post => <Post key={post.id} post={post} icon={\"trash alternate outline\"} removeFromFavorites={this.props.removeFromFavorites}/>)}\n      </React.Fragment>\n    )\n  }\n\n  noFavoritesAdded = () => {\n    return (\n      <React.Fragment>\n        <Message centered style={{textAlign: 'center', backgroundColor: '#FFFACD', width: \"50%\", marginLeft: \"25%\"}}>No favorites yet.</Message>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    console.log(this.props.favorites);\n    return (\n      <React.Fragment>\n        {this.props.favorites.length > 0 ? this.mapFavorites() : this.noFavoritesAdded()}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Favorites\n","import React, { Component } from 'react'\nimport { Tab, Icon, Menu } from 'semantic-ui-react'\nimport Posts from './Posts'\nimport Favorites from './Favorites'\n\n\n  class Navbar extends Component {\n\n    render() {\n      const panes = [\n          { menuItem:\n            (<Menu.Item key={'subreddit'} className=\"navbar-tab\"><Icon name=\"reddit alien\" /> r/analog </Menu.Item>),\n            render: () => <Tab.Pane attached={true}> <Posts addToFavorites={this.props.addToFavorites}/></Tab.Pane>\n            },\n          { menuItem:\n            <Menu.Item key={'favorites'} className=\"navbar-tab\"><Icon name=\"heart\" /> favorites {`(${this.props.favorites.length})`}</Menu.Item>,\n            render: () => <Tab.Pane attached={true}><Favorites favorites={this.props.favorites} removeFromFavorites={this.props.removeFromFavorites}/></Tab.Pane>\n          },\n          ]\n\n      return (\n        <Tab menu={{borderless: true, attached: true, tabular: false }} panes={panes} />\n      )\n    }\n\n  }\n\n  export default Navbar\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      favorites: []\n    }\n  }\n\n  addToFavorites = (post) => {\n    this.setState({favorites: [...this.state.favorites, post]})\n  }\n\n  removeFromFavorites = (post) => {\n    const favorites = this.state.favorites\n    const index = favorites.indexOf(post)\n    const updatedFavorites = [...favorites.slice(0, index), ...favorites.slice(index + 1)]\n    this.setState({favorites: updatedFavorites})\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar favorites={this.state.favorites} addToFavorites={this.addToFavorites} removeFromFavorites={this.removeFromFavorites} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}